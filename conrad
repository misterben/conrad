#!/usr/bin/python
import sys, logging
import os.path as op
from optparse import OptionParser

__version__ = '2.6'
logger = logging.getLogger('conrad')

def main():
    from libconrad.core import Site
    from libconrad.server import start_server

    usage = '%s [options] [source]' % sys.argv[0]
    parser = OptionParser(usage)

    parser.add_option('', '--log', default='-',
                      help='redirect log to this file (default: stdout)')
    parser.add_option('-q', '--quiet', default=False, action='store_true',
                      help='do not output information messages')
    parser.add_option('-v', '--verbose', default=False, action='store_true',
                      help='output more logs')

    parser.add_option('-c', '--create', default=False, action='store_true', help='Create a basic website in the current directory based on the given template')
    parser.add_option('-t', '--template', default='default', type='string', action='store', dest='template', help='Create a basic website in the current directory based on the given template')

    parser.add_option('-w', '--webserve', default=False, action='store_true',
                      help='start local web server')
    parser.add_option('-a', '--address', default='127.0.0.1',
                      help='address to listen on (default: all interfaces)')
    parser.add_option('-p', '--port', default=8000, type='int',
                      help='port to listen on (default: 8000)')

    parser.add_option('-d', '--dest', default='',
        help='destination directory (default: _build in source dir)')
    parser.add_option('', '--version', default=False, action='store_true',
                      help='show libconrad version')

    opts, args = parser.parse_args()

    if opts.version:
        print 'libconrad', __version__
        sys.exit(0)

    if opts.verbose:
        level = logging.DEBUG
    elif opts.quiet:
        level = logging.ERROR
    else:
        level = logging.INFO

    if opts.log == '-':
        logging.basicConfig(stream=sys.stdout, level=level)
    else:
        logging.basicConfig(filename=opts.log, level=level)

    if opts.create:
        if op.exists(op.join(op.dirname(op.abspath(__file__)), 'templates', opts.template)):
            print "Creating basic site with template "+opts.template
            title = raw_input('Enter a title for your site: ')
            author = raw_input('Enter your name: ')
            url = raw_input('Enter your site URL: ')
            settings = open('settings.cfg', 'w')
            settings.write('title:'+title+'\n')
            settings.write('author:'+author+'\n')
            settings.write('url:'+url+'\n')
            settings.close()
            from os import system
            system('cp -R '+op.join(op.dirname(op.abspath(__file__)),'templates',opts.template, '*')+' .')
        else:
            print "Template "+opts.template+" does not exist"
            print "(Looking in "+op.join(op.dirname(op.abspath(__file__)), 'templates', opts.template)+")"

        sys.exit(1)

    source = op.abspath(args and args[0] or '.')
    if not op.exists(op.join(source, 'settings.cfg')):
        logger.error("Can't find settings.cfg in the current folder")
        sys.exit(1)

    dest = opts.dest or op.join(source, '_build')


    if opts.webserve:
        start_server(opts.address, opts.port, source, dest)
    else:
        site = Site(source, dest)
        site.render()


if __name__ == '__main__':
    main()
